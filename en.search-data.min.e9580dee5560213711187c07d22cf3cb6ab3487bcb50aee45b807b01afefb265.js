'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/diary/docs/2020/03/31/','title':"2020-03-31",'content':"2020 年 3 月 31 日（星期二） 今日待办  xxx   语言 滥觞 lànshāng 浮起酒杯。喻事情的开始\n夫江始出于岷山,其源可以滥觞。——《孔子家语·三恕》\n政史地 内卷化（网络）  靠极端剥削、压榨自己，从而在社会获得少量的竞争优势 明明可以有更加轻松，效果还更好的选择，却仍旧在旧有的选择中不断投入各类资源，以及由此产生的各种现象 不改变生产方式，不提高技术水平，而是靠极端剥削、压榨本国的劳动力在国际市场获得竞争优势  举一个很简单的例子：\n假定某省考生数量，录取名额不变，即录取率不变。\n现在有一所学校，甲校要求高中生每天学习 14 个小时，寒暑假和双休日补课。这一操作的效果是在短期内提高了甲校的录取率。\n这种录取率提升的甜头让乙、丙、丁校羡慕，于是均决定向甲校学习，推行甲校的教学管理模式。\n由于担心甲、乙、丙、丁校录取率的上升导致某省其余中学的录取率相对下降，于是该省其余学校也不得不采取跟进策略，学习和推广甲校的教学管理模式。\n最终，某省所有中学都开始强迫学生一天学习 14 个小时，取消寒暑假和双休日。\n于是，由于全省均采用甲校的模式，各个学校的考分尽管普遍上涨，在高考录取率不变的前提下，各个学校的录取率与推广甲学校模式之前相差无几（比如，原来一本线是 550 分，由于学生成绩普遍提高，一本线上调至 590 分，导致各个学校录取率与推广甲校之前无异）。\n在这一过程中，为提高分数，中学生不得不投入更多的学习时间和资源。由于该省高考录取分数线提高，单个学生的分数看似提高，但从录取结果看，这种投入没有意义。这就是所谓的分数增长，但学生考取好大学的几率没有实质增长，即 “没有发展的增长”—— 内卷化。\n内卷化（学术） 从词源来看，“内卷化” 一词的英文为 involution, 它源于拉丁语 involutum, 原意是 “转或卷起来”。\n从起源看，“内卷化”（involution）滥觞于顶顶大名的大哲学家康德，他初步区分了内卷化（involution）和 “演化”（evolution），随后学者 Alexander Goldenweiser 借用该概念描述 “一种内部不断精细化的文化现象”。\n真正把 “内卷化” 这一概念发扬光大的是人类学家 Clifford Geertz 和经济史学家黄宗智。\n1963 年，Clifford Geertz 出版了一部研究印度尼西亚的著作 ——《农业的内卷化 (agricultural involution)：印度尼西亚生态变迁的过程》。他在研究中发现，在殖民地时代和后殖民地时代的爪哇，农业生产长期以来原地不动，未曾发展，只是不断地重复简单再生产。\n针对这一现象，Clifford Geertz 借用了 “内卷化” 的概念，即 “一个既有的形态，由于内部细节过分的精细而使得形态本身获得了刚性”, 以刻画印度尼西亚爪哇地区 “由于农业无法向外延扩展，致使劳动力不断填充到有限的水稻生产” 的过程 。\n著名的经济史学家黄宗智教授在其著作《华北的小农经济与社会变迁》和《长江三角洲小农家庭与乡村发展》中借用了 Clifford Geertz 的概念。\n他在考察明清以降，中国经济发展与社会变迁时指出，当时普遍存在的现象是农民通过在有限的土地上投入大量的劳动力来获得总产量增长的方式，但是这种方式却是边际效益递减的，是一种没有发展的增长，即 “内卷化”。\n按照黄教授的说法，“内卷的要旨在于单位土地上劳动投入的高度密集和单位劳动的边际报酬减少”。\n在《华北的小农经济与社会变迁》一书中，黄教授认为 “内卷化” 有两层含义：\n一是家庭农场因为耕地面积过于狭小，为了维持生活而不得不在劳动力边际回报已经降到极低的情况下继续投入劳力，以期增加小农农场总的产出；\n二是发展不足的经营式农场和小农经济结合在一起，形成的一种特别顽固、难以发生质变的小农经济体系。\n在《长江三角洲小农家庭与乡村发展》中，黄教授指出，即使在长三角当时这样商品经济其实很发达的的地区，商品经济反而促进了 \u0026quot; 小农经济” 的内卷化发展，而非像英国那样 “向资本主义过渡”。\n实际上，黄教授使用这一概念，描绘的是小农经济的顽固性，要回答的问题是：为什么中国小农经济始终没有过渡到资本主义经济，即使有，也始终是 “资本主义萌芽”？\n进而，这一概念要回答的是：\n为什么中国与西方在近代走上了不同的路，即中国继续在传统的小农经济中固守，而欧洲则通过工业革命提高了单位劳动生产率，最终走上了以机器大生产为核心的现代化道路？\n如今，这一概念进一步拓展，延伸到了政治学等领域。例如，学者杜赞奇在其著作《文化、权力与国家 ——1900-1942 年的华北》中提出了 “国家政权内卷化” 概念。\n该书以微观视角对清末新政到日本控制华北这一时间段的华北农村社会进行分析。他阐述了国家政权现代化与乡村社会文化网络互动的议题。\n具言之，清末新政后，在国家内卷化的冲击下，国家政权通过融入乡村文化网络与乡村社会良性互动的控制模式遭到破坏，这种依赖传统文化网络的良性互动遭到破坏后，对乡村造成巨大冲击，国家政权再也无法像 20 世纪之前一样对乡村进行有效控制。\n他实际证明了 20 世纪前期的中国国家政权，如果离开或破坏文化网络以控制乡村社会的企图是注定要失败的。\n因此，杜赞奇利用这一概念实际上是表达：国家机构不是靠提高旧有或新增（此处指人际或其他行政资源）机构的效益，而是靠复制或扩大旧有的国家与社会的关系 —— 如中国旧有的赢利型经纪体制 —— 来扩大其行政职能。\n总体来说，“内卷化” 是一个描述性概念，并非成熟的理论，“内卷化” 出现的原因并未得到进一步解答。\n 参考：\n 何为「内卷化」？有什么通俗易懂的内卷化的例子？   今日总结 "});index.add({'id':1,'href':'/diary/docs/2020/04/','title':"4 月",'content':"2020 年 4 月 本月计划     本月总结 "});index.add({'id':2,'href':'/diary/docs/2020/03/','title':"3 月",'content':"2020 年 3 月 本月计划  Istio Handbook 开源电子书  Istio Handbook 编委会  会议（周五 2020-03-13 20:00-21:00）  Kickoff 文档 合作编辑 Handbook 目录       AI2B 研发   本月总结 "});index.add({'id':3,'href':'/diary/docs/2020/03/08/','title':"2020-03-08",'content':"2020 年 3 月 8 日（星期日） 今日待办  陪闵子玩 Istio 1.5 发布了，学习一个   生活 陪闵子玩  大部分时间，她还是像以往一样，对着小度播的儿歌，左右摇摆  闵子现在挺会跳了 下午陪闵子画画（乱画）  闵子很喜欢笑，笑起来很可爱，像她妈妈    编程 算法教程 今天看到一个算法教程还不错，推荐一下，labuladong 的算法小抄。\n Istio 1.5 Istio 1.5 于 2020-03-05 发布了。\n引入 Istiod 将控制平面整合为一个新的二进制文件 Istiod，简化了安装、运行和升级。所有 API 和运行时特性均与以前的组件一致。\n参考：官网 1.5 change note\n可扩展性的新模型 Istio 一直是最可扩展的服务网格，其 Mixer 插件允许自定义策略和遥测支持，而 Envoy 扩展则允许数据平面自定义。Istio 1.5 带来了了一个新模型，该模型使用 WebAssembly（Wasm）将 Istio 的可扩展性模型与 Envoy 的统一。Wasm 使开发人员能够安全地在 Envoy 代理中分发和执行代码，以便与遥测系统和策略系统集成，并控制路由，甚至转换消息正文。它将更加灵活和高效，从而无需单独运行 Mixer 组件（这也简化了部署）。\n更容易使用 现在，使用 istioctl 的 Istio 命令行安装已进入 beta 阶段。istioctl 也有十几项改进，包括分析新项目、更好的验证规则，以及更好的与 CI 系统集成的能力等。它已经成为了解 Istio 的系统运行状态并确保配置更改安全的必要工具。\nIstio 的安全性也得到了许多增强，更易于使用。Beta 版自动 mTLS 的启动，简化了 mTLS 的配置并使其自动化。\n更安全 在 1.5 版中，所有安全策略，包括自动 mTLS、AuthenticationPolicy（对等身份验证和 RequestAuthentication）和授权现在都处于 Beta 版。SDS 已经处于稳定版。授权（Authorization）现在支持 \u0026ldquo;拒绝\u0026rdquo; 语义，以强制执行不可覆盖的强制性控件。此外，Node 代理和 Istio 代理已组合到一个二进制文件中，这意味着不再需要配置 PodSecurityPolicy。\n改进不止于此。现在不再需要在每个 Pod 上安装证书，也不必在证书更改时重新启动 Envoy。证书直接从 Istiod 交付到每个 pod。而且，每个 pod 都有唯一的证书。\n更好的可观察性 Telemetry v2 现在报告了原始 TCP 连接（除了 HTTP）的度量标准，并且还通过在遥测和日志中添加响应状态代码来增强了对 gRPC 工作负载的支持。现在默认使用 Telemetry v2。新的遥测系统将等待时间缩短了一半，90％ 的等待时间从 7 毫秒减少到 3.3 毫秒。不仅如此，消除 Mixer 还使总 CPU 消耗减少了 50％，降至每秒每 1,000 个请求 0.55 个 vCPU。\n 今日总结  Istio 1.5 架构变化较大  "});index.add({'id':4,'href':'/diary/docs/2020/04/08/','title':"2020-04-08",'content':"2020 年 4 月 8 日（星期三） 今日待办     编程 依赖注入 可以通过多种方式为实例提供必要的依赖关系：\n 构造函数注入 属性注入 方法注入  构造函数注入 构造函数注入是许多依赖注入框架的首选方法，常受依赖注入框架的青睐。\n它清楚地告诉我们创建特定组件所需的所有依赖关系，并且这些依赖不是可选的，这些依赖关系在整个组件中应该都是必需的。\npublic class DataProcessor { private final DbManager manager; private final Calculator calculator; public DataProcessor(DbManager manager, Calculator calculator) { this.manager = manager; this.calculator = calculator; } // ... }  优点：  不变性：依赖关系始终如初。   缺点  必须在初始化时提供所有依赖项。  有时，我们无法自己初始化一个组件，或者在某个时刻我们无法提供组件的所有依赖关系。或者我们需要使用另外一个构造函数。一旦设置了依赖项，我们就无法再改变它们了。      属性注入 属性注入更适合可选参数，例如监听或委托。又或是我们无法在初始化时提供依赖关系。\n其它编程语言，例如 Swift，大量使用了带属性的 委托模式。因此，使用属性注入将使其它语言的开发人员更熟悉我们的代码。\npublic class DataProcessor { // 外部要提前进行 属性注入，否则调用会出现 NullPointerException  public DbManager manager = null; public Calculator calculator = null; // ...  public void processData() { // WARNING: Possible NPE  this.manager.processData(); } public BigDecimal calc(BigDecimal input) { // WARNING: Possible NPE  return this.calculator.expensiveCalculation(input); } } 有时，我们无法访问类型实际的初始化方法，只能访问一个已经初始化的实例。或者在初始化时，所需要的依赖关系并不像之后那样明确。\n在这些情况下，我们可以使用属性注入而不是依赖于构造函数。\n 优点  可以通过构造方法注入，也可以通过实例注入 随时注入   缺点  易变性，调用前要注入，否则会出现 NullPointerException    方法注入 如果在每次调用时依赖项可能不同，那么使用方法注入最好不过了。方法注入进一步解耦组件，它使方法本身持有依赖项，而非整个组件。\npublic class DataProcessor { // ...  public BigDecimal calc(Calculator calculator, BigDecimal input) { return calculator.expensiveCalculation(input); } }  优点  进一步解耦组件，它使方法本身持有依赖项，而非整个组件 每次调用时依赖项可以不同   缺点  每次调用都需要传依赖的实例    参考：\n [译] 用依赖注入解耦你的代码   RTSP Real Time Streaming Protocol\n发布策略 蓝绿部署 (Blue-green Deployments) 蓝绿部署的目的是减少发布时的中断时间、能够快速撤回发布。\n蓝绿部署中，一共有两套系统：\n 一套是正在提供服务系统，标记为 “绿色”； 另一套是准备发布的系统，标记为 “蓝色”。  两套系统都是功能完善的，并且正在运行的系统，只是系统版本和对外服务情况不同。\n金丝雀发布 (Canary Releases) 金丝雀发布和国内常说的灰度发布是同一类策略。\n蓝绿部署是准备两套系统，在两套系统之间进行切换，金丝雀策略是只有一套系统，逐渐替换这套系统。\n譬如说，\n 目标系统是一组无状态的 Web 服务器，但是数量非常多，假设有一万台 这时候，蓝绿部署就不能用了，因为你不可能申请一万台服务器专门用来部署蓝色系统  在蓝绿部署的定义中，蓝色的系统要能够承接所有访问   可以想到的一个方法是：  只准备几台服务器，在上面部署新版本的系统并测试验证。测试通过之后，担心出现意外，还不敢立即更新所有的服务器。 先将线上的一万台服务器中的 10 台更新为最新的系统，然后观察验证 确认没有异常之后，再将剩余的所有服务器更新     什么时候可以用蓝绿，不能用金丝雀呢？  整个系统只有一台服务器的时候。    A/B 测试 (A/B Testing) 蓝绿部署和金丝雀是发布策略，目标是确保新上线的系统稳定，关注的是新系统的 BUG、隐患。 A/B 测试关注的是不同版本的服务的实际效果，譬如说转化率、订单情况等。\nA/B 测试是效果测试，同一时间有多个版本的服务对外服务，这些服务都是经过足够测试，达到了上线标准的服务，有差异但是没有新旧之分（它们上线时可能采用了蓝绿部署的方式）。\n在 A/B 测试中，需要能够控制流量的分配，譬如说，为 A 版本分配 10% 的流量，为 B 版本分配 10% 的流量，为 C 版本分配 80% 的流量。\n流量切分  譬如说，给最初更新的 10 台服务器设置较低的权重、控制发送给这 10 台服务器的请求数，然后逐渐提高权重、增加请求数。 既可以用于金丝雀发布，也可以用于 A/B 测试。   大量 time_wait 状态 TIME_WAIT 是怎么产生的？ 连接关闭的过程  主动关闭连接的一方，调用 close ()；协议层发送 FIN 包 被动关闭的一方收到 FIN 包后，协议层回复 ACK；然后被动关闭的一方，进入 CLOSE_WAIT 状态；主动关闭的一方等待对方关闭，则进入 FIN_WAIT_2 状态 被动关闭的一方在完成所有数据发送后，调用 close () 操作，协议层发送 FIN 包给主动关闭的一方，等待对方的 ACK，被动关闭的一方进入 LAST_ACK 状态 主动关闭的一方收到 FIN 包，协议层回复 ACK，主动关闭连接的一方进入 TIME_WAIT 状态；而被动关闭的一方，进入 CLOSED 状态 等待 2MSL 时间，主动关闭的一方，结束 TIME_WAIT，进入 CLOSED 状态  TIME_WAIT 只会出现在主动断开连接的一方 大量 TIME_WAIT 造成的影响  在高并发短连接的 TCP 服务器上，当服务器处理完请求后立刻主动正常关闭连接。  短连接表示 “业务处理 + 传输数据的时间 远远小于 TIMEWAIT 超时的时间” 的连接 高并发可以让服务器在短时间范围内同时占用大量端口，  而端口有个 0~65535 的范围，并不是很多，刨除系统和其他服务要用的，剩下的就更少了。     在实际业务场景中，一般长连接对应的业务的并发量并不会很高 这些端口都是服务器临时分配，无法用 SO_REUSEADDR 选项解决这个问题    排查 查看 TCP 各个状态的数量 netstat -ant | awk \u0026#39;/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}\u0026#39; | sort -rn -k2 TCP 状态含义    TCP 状态 含义     LISTEN 服务器在等待进入呼叫   SYN_RECV 一个连接请求已经到达，等待确认   SYN_SENT 应用已经开始，打开一个连接   ESTABLISHED 正常数据传输状态   FIN_WAIT1 应用说它已经完成   FIN_WAIT2 另一边已同意释放   ITMED_WAIT 等待所有分组死掉   LAST_ACK 等待所有分组死掉   TIME_WAIT 另一边已初始化一个释放   CLOSING 两边同时尝试关闭   CLOSED 无连接是活动的或正在进行    统计 TIME_WAIT 连接的本地地址 netstat -an | grep TIME_WAIT | awk \u0026#39;{print $4}\u0026#39; | sort | uniq -c | sort -rn -k1 | head 如何尽量处理 TIMEWAIT 过多的问题？ 修改内核文件 /etc/sysctl.conf net.ipv4.tcp_syncookies = 1 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭； net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭； net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。 net.ipv4.tcp_fin_timeout 修改系默认的 TIMEOUT 时间 然后执行 /sbin/sysctl -p 让参数生效.\n/etc/sysctl.conf 是一个允许改变正在运行中的 Linux 系统的接口，它包含一些 TCP/IP 堆栈和虚拟内存系统的高级选项，修改内核参数永久生效。\n简单来说，就是打开系统的 TIMEWAIT 重用和快速回收。\n如果以上配置调优后性能还不理想，可继续修改一下配置：\nnet.ipv4.tcp_keepalive_time = 1200 #表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。 net.ipv4.ip_local_port_range = 1024 65000 #表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为1024到65000。 net.ipv4.tcp_max_syn_backlog = 8192 #表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。 net.ipv4.tcp_max_tw_buckets = 5000 #表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。 默认为180000，改为5000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于 Squid，效果却不大。此项参数可以控制TIME_WAIT套接字的最大数量，避免Squid服务器被大量的TIME_WAIT套接字拖死。 参考：\n 解决 TIME_WAIT 过多造成的问题   nginx 配置问题  nginx 在配置 \u0026ldquo;不启用 keep-alive\u0026rdquo; 时，会在 http 请求结束时主动断开连接  尝试开启 http 的 keep-alive  keepalive_timeout 65;  nginx 与 fast-cgi 的默认连接是短连接  修改 nginx 配置使其与 fastcgi 的连接使用长连接  upstream phpserver{ server 127.0.0.1:9000 weight=1; # upstream 中的 keepalive 指定 nginx 每个 worker 与 fastcgi 的最大长连接数 keepalive 100 }  若 nginx 与 fast-cgi 在同一台服务器上，则使用 unix 域 会更为高效，同时避免了 TIME_WAIT 的问题  proxy_pass 与 fastcgi_pass 的区别 客户端 --http--\u0026gt; 前端负载均衡 Nginx --proxy_pass--\u0026gt; 业务服务器 Nginx --fastcgi_pass--\u0026gt; 业务服务器 php-fpm 为什么要有 TIME_WAIT 状态？  可靠地实现 TCP 全双工连接的终止  在进行关闭连接四次挥手协议时，最后的 ACK 是由主动关闭端发出的，如果这个最终的 ACK 丢失，服务器将重发最终的 FIN 因此客户端必须维护状态信息允许它重发最终的 ACK。如果不维持这个状态信息，那么客户端将响应 RST 分节，服务器将此分节解释成一个错误（在 java 中会抛出 connection reset 的 SocketException)。 因而，要实现 TCP 全双工连接的正常终止，必须处理终止序列四个分节中任何一个分节的丢失情况，主动关闭的客户端必须维持状态信息进入 TIME_WAIT 状态。   让老的重复分节在网络中消逝  在关闭一个 TCP 连接后，马上又重新建立起一个相同的 IP 地址和端口之间的 TCP 连接，后一个连接被称为前一个连接的化身（incarnation)，那么有可能出现这种情况，前一个连接的迷途重复分组在前一个连接终止后出现，从而被误解成从属于新的化身。 为了避免这个情况， TCP 不允许处于 TIME_WAIT 状态的连接启动一个新的化身，因为 TIME_WAIT 状态持续 2MSL，就可以保证当成功建立一个 TCP 连接的时候，来自连接先前化身的重复分组已经在网络中消逝。     我的 MacOS Apps 通用    软件 类型 评分 说明     iTerm 终端 ★★★★★    zoom.us IM - 视频 ★★★★    draw.io 作图 ★★★★    PicGo 图床 ★★★★    Dropbox 备份 - 同步 ★★★★    Keyboard Maestro 快捷键 ★★★★    Alfred 4 搜索 ★★★★    Google Chrome 浏览器 ★★★★    OmniDiskSweeper 系统 - 磁盘管理 ★★★★    ShiftIt 系统 - 窗口移动 ★★★★    Telegram IM ★★★    QQ IM ★★★    Skype for Business IM ★★★    Slack IM ★★★    DingDing IM ★★★    WeChat IM ★★★    WeChat Work IM ★★★    Keynote Office ★★★    Microsoft Excel Office ★★★    Microsoft OneNote Office ★★★    Microsoft Outlook Office ★★★    Microsoft PowerPoint Office ★★★    Microsoft Word Office ★★★    Numbers Office ★★★    Pages Office ★★★    SwitchHosts! host 管理 ★★★    Axure RP 8 产品 ★★★    Sketch 产品 - UI ★★★    V2RayX 代理 ★★★    OmniGraffle 作图 ★★★    Typora 写作 - Markdown ★★★    OneDrive 备份 ★★★    百度网盘 备份 ★★★    Anki 学习 ★★★    LICEcap 录屏 - GIF ★★★    CheatSheet 快捷键显示 ★★★    XMind 思维导图 ★★★    截图 截图 ★★★    OBS 直播 ★★★    Kindle 看书 ★★★    Tencent Lemon 系统 - 磁盘清理 ★★★    InsomniaX 系统 - 禁用休眠 ★★★ 禁用 MacBook 上的合盖休眠   Scroll Reverser 系统 - 鼠标反转 ★★★    IINA 视频 ★★★    The Unarchiver 解压缩 ★★★    NeteaseMusic 音乐 ★★★     编程    软件 类型 评分 说明     Visual Studio Code 编辑器 ★★★★★    Docker  ★★★★    GoLand IDE - Go ★★★★    IntelliJ IDEA IDE - Java ★★★★    PhpStorm IDE - PHP / 前端 ★★★★    Multipass 虚拟机管理 ★★★★    Sublime Text 编辑器 ★★★★    nteract  ★★★    Postman HTTP ★★★    CLion IDE - C++ ★★★    Robo 3T IDE - MongoDB ★★★ 轻量级 Studio 3T   Studio 3T IDE - MongoDB ★★★    Racket v7.2 IDE - Racket ★★★    MIT/GNU Scheme IDE - Scheme ★★★    Xcode IDE - iOS ★★★    微信开发者工具 IDE - 微信 ★★★    Anaconda-Navigator Python ★★★    Beyond Compare diff ★★★    Sourcetree git 管理 ★★★    Dash 定义文档 ★★★    GitHub Desktop 开源 ★★★    Progress Telerik Fiddler 抓包 ★★★    Wireshark 抓包 ★★★    DataGrip 数据库 ★★★    Sourcetrail 源码阅读 ★★★    TeX 编辑器 - LaTeX ★★★    VirtualBox 虚拟机 ★★★     参考：\n nteract/nteract    物化生 红外光栅传感器 光栅 由大量等宽等间距的平行狭缝构成的光学器件称为光栅（grating）。\n一般常用的光栅是在玻璃片上刻出大量平行刻痕制成，刻痕为不透光部分，两刻痕之间的光滑部分可以透光，相当于一狭缝。\n精制的光栅，在 1cm 宽度内刻有几千条乃至上万条刻痕。\n 利用透射光衍射的光栅称为透射光栅 利用两刻痕间的反射光衍射的光栅，称为反射光栅  如在镀有金属层的表面上刻出许多平行刻痕，两刻痕间的光滑金属面可以反射光    红外光栅 遮挡检测 红外光栅，（又叫电子光栅或红外栅栏）（也叫 “红外栏杆”）是主动红外对射的一种，\n采用多束红外光对射，发射器向接收器以 “低频发射、时分检测” 方式发出红外光，一旦有人员或物体挡住了发射器发出的任何相邻两束以上光线超过 30ms 时，接收器立即输出报警信号，当有小动物或小物体挡住其中一束光线时，报警器不会输出报警信号。\n 今日总结 "});index.add({'id':5,'href':'/diary/docs/2020/04/07/','title':"2020-04-07",'content':"2020 年 4 月 7 日（星期二） 今日待办  201 PoSD 翻译  修改负责的 5 个 Principles 并提交到 icode 前 20 个 Principles 合并到 word，并提交给出版社进行初审     编程 编程哲学 中文房间 中文房间（英语：Chinese room），是由约翰・希尔勒提出的一个思想实验，借以反驳强人工智能的观点。根据强人工智能的观点，只要计算机拥有了适当的程序，理论上就可以说计算机拥有它的认知状态并且可以像人一样地进行理解活动。\n该实验出自约翰・罗杰斯・希尔勒的论文《心灵、大脑和程序》（ Minds, Brains, and Programs）中，发表于 1980 年的《 行为与脑科学（英语：Behavioral and Brain Sciences）》。\n中文房间思想实验是什么？它是否成功地否决了图灵测试的有效性？\n中文房间是否可以否定人类会思考？\n因果论与自由意志 k8s 相关 canonical/multipass  Multipass orchestrates virtual Ubuntu instances https://multipass.run\n# 创建一个 VM, 1GB 内存和 5GB 磁盘 multipass launch --name k3s --mem 1G --disk 5G # 为 VM 启动一个 shell multipass shell k3s # 在其上安装 k3s curl -sfL https://get.k3s.io | sh – rancher/fleet  Rancher 开源 Fleet：业界首个海量 K8S 集群管理项目\n2019 年，Rancher 推出了一系列轻量级 Kubernetes 开源项目，包括轻量级的 Kubernetes 发行版 K3s 、基于 Kubernetes 的应用程序部署引擎 Rio 、业界首个 Kubernetes 操作系统 K3OS 。\n Rio 是 Rancher 新出的一款轻量级 service mesh 产品，基于 linkerd2，相当轻。但麻雀虽小，五脏俱全，基本上 istio 有的功能，它都有。\nrancher/rio  参考：Rancher 极简 service mesh 产品 Rio 安装试玩（基于 k3s）\ncncf/udpa  Universal Data Plane API Working Group (UDPA-WG)\nGoal: The objective of the Universal Data Plane API Working Group (UDPA-WG) is to bring together parties across the industry interested in a common control and configuration API for data plane proxies and load balancers.\nnote 使用 netlify 部署 gitbook 参考：A Step-by-Step Guide: GitBook on Netlify\n最后一步使用\nnpm install -g gitbook-cli \u0026amp;\u0026amp; gitbook install \u0026amp;\u0026amp; gitbook build 使用 netlify 持续部署 PR 参考：Github 集成 Netlify：快速预览 PR\nvps Ubuntu 开源镜像  清华开源镜像 阿里巴巴开源镜像  Ubuntu    oh-my-zsh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\nzsh prompt export PROMPT=\u0026#39;%{$fg[magenta]%}%(?..%?%1v)%n@%{$fg[green]%}%M:%{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)\u0026#39; 设置默认为 zsh sudo chsh -s /usr/bin/zsh ubuntu  书影音 电影 乔乔的异想世界 Jojo Rabbit (2019) 导演: 塔伊加・维迪提\n编剧: 塔伊加・维迪提 / 克里斯汀・勒南斯\n主演: 罗曼・格里芬・戴维斯 / 托马辛・麦肯齐 / 斯嘉丽・约翰逊 / 塔伊加・维迪提 / 山姆・洛克威尔\n 数学  语言  政史地 左图右史 左图右史，汉语成语，拼音是 zuǒ tú yòu shǐ，意思是形容室内图书多。出自《新唐书·杨绾传》。\n参考：\n 左图右史，如何直观形象的去学习历史   物化生  其他  今日总结 "});index.add({'id':6,'href':'/diary/docs/2020/04/06/','title':"2020-04-06",'content':"2020 年 4 月 6 日（星期一） 备注：\n 清明节放假  今日待办  201 PoSD 翻译  前 20 个 Principles 翻译审校（评论） 编委会讨论前 20 个 Principles 翻译修改版 修改负责的 5 个 Principles 并提交到 icode     今日总结 "});index.add({'id':7,'href':'/diary/docs/2020/04/03/','title':"2020-04-03",'content':"2020 年 4 月 3 日（星期五） 今日待办     编程 Bookinfo Application 安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/\n运行 Bookinfo sample application alias k=\u0026#34;kubectl\u0026#34; k apply -f samples/bookinfo/platform/kube/bookinfo.yaml k get services 查看 Bookinfo 应用是否正常\nby checking for the page title in the response\nkubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=\u0026#39;{.items[0].metadata.name}\u0026#39;) -c ratings -- curl productpage:9080/productpage | grep -o \u0026#34;\u0026lt;title\u0026gt;.*\u0026lt;/title\u0026gt;\u0026#34; Set the ingress IP and ports:\nexport INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.status.loadBalancer.ingress[0].ip}\u0026#39;) export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.spec.ports[?(@.name==\u0026#34;http2\u0026#34;)].port}\u0026#39;) export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.spec.ports[?(@.name==\u0026#34;https\u0026#34;)].port}\u0026#39;) Docker Desktop 的 Kubernetes 版本需要使用 hostname 而不是 ip\nexport INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')   To confirm that the Bookinfo application is accessible from outside the cluster:\ncurl -s http://${GATEWAY_URL}/productpage | grep -o \u0026quot;\u0026lt;title\u0026gt;.\\*\u0026lt;/title\u0026gt;\u0026quot;  stedolan/jq  Command-line JSON processor http://stedolan.github.io/jq/\n 今日总结 "});index.add({'id':8,'href':'/diary/docs/2020/04/02/','title':"2020-04-02",'content':"2020 年 4 月 2 日（星期四） 今日待办     编程 Istio 安装 minikube minikube start --image-mirror-country='cn' --registry-mirror=https://registry.docker-cn.com\n安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/\n运行 Bookinfo sample application kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml kubectl get services 一切顺利，输出 service list。\n过了一会，报错，连不上 server\nThe connection to the server 192.168.99.100:8443 was refused - did you specify the right host or port? minikube status minikube start --image-mirror-country=\u0026#39;cn\u0026#39; --registry-mirror=https://registry.docker-cn.com 解决 连不上 server 删除： minikube delete\n重新 start\n 过一会又出现错误\nThe connection to the server 192.168.99.101:8443 was refused - did you specify the right host or port? 还是切换会 Docker Desktop 版本的 Kubernetes 吧。。。\n使用 gotok8s/k8s-docker-desktop-for-mac 原理：\n利用 GitHub Actions 实现 k8s.gcr.io 上 kubernetes 依赖镜像自动同步到 Docker Hub 上指定的仓库中。 通过 load_images.sh 将所需镜像从 Docker Hub 的同步仓库中取回，并重新打上原始的 tag。\n 今日总结  MacOS 还是使用 Docker Desktop 的 K8s，Minikube 不好用  "});index.add({'id':9,'href':'/diary/docs/2020/','title':"2020 年",'content':"2020 年 年度计划 2020 年读书计划  xxx xxx  2020 年观影计划  xxx xxx  2020 年旅行计划  xxx xxx   年度总结  "});index.add({'id':10,'href':'/diary/categories/','title':"Categories",'content':""});index.add({'id':11,'href':'/diary/docs/','title':"Docs",'content':""});index.add({'id':12,'href':'/diary/tags/','title':"Tags",'content':""});index.add({'id':13,'href':'/diary/','title':"首页",'content':""});})();